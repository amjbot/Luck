type file_bundle               = [filename]
type resource_bundle           = [resource]
type annotated_namespace       = namespace,[term,typ]
type target_executable         = [filename]

type symbolic_link             = string, string, [string]
type hard_link                 = string, namespace, string, [string]
type filename                  = string
type resource                  = string, namespace, [hard_link]
type namespace                 = [namespace_item]
type namespace_item            = 
   | NS_import of symbolic_link
   | NS_type of typ
   | NS_bind of (string * term)
   | NS_expr of term

type term = 
   | Con( string, typ )
   | Var( int, string )
   | Abs( int, string, term )
   | App( term, term )
type typ = 
   | TType( string, [typ] )
   | TVar( string )
   | TForall( string, typ )
   | TArrow( typ, typ )
   | TAny( [typ] )


let option_target = ref( "sml" )
let option_out = ref( "a.out" )
















let rec term_substitute (k: string) (v: term) = function
   | Con(c,tt) -> Con(c,tt)
   | Var(n,m) -> if m=k then v else Var(n,m)
   | Abs(n,p,b) -> if p=k then Abs(n,p,b) else Abs(n,p,(term_substitute k v b))
   | App(l,r) -> App((term_substitute k v l),(term_substitute k v r))

let rec term_apply (k: string) (f: term -> unit): term -> unit = function
   | Con(c,tt) -> ()
   | Var(n,m) as v -> if m=k then f(v)
   | Abs(n,p,b) -> if p<>k then term_apply k f b
   | App(l,r) -> term_apply k f l; term_apply k f r

let rec type_substitute (k: string) (v: typ) = function
   | TType(t,ts) -> TType(t,List.map (type_substitute k v) ts)
   | TVar(k') -> if k=k' then v else TVar(k')
   | TForall(p,t) -> TForall(p,if p=k then t else (type_substitute k v t))
   | TArrow(l,r) -> TArrow(type_substitute k v l, type_substitute k v r)
   | TAny(ts) -> TAny(List.map (type_substitute k v) ts)

let con c t = Con(c,t)
let var v = Var(unique_int(),v)
let abs p b = let vn = unique_int() in 
              let v = Var(vn,p) in Abs(vn,p,term_substitute p v b)
let app l r = App(l,r)



let tvar() = TVar ("_"^(unique_string()))
let tarr p b tt = 
    let a = match p with Some t -> t | None -> tvar() 
    and b = match b with Some t -> t | None -> tvar()
    in match tt with
    | Some(TArrow(a,b) as c) -> a,b,c
    | _ -> a,b,TArrow(a,b)

let term_count : (term,int) hash_table = new hashtable
let term_n t = if not(term_count#has t)
      then term_count#set t (List.length(term_count#items())); 
      term_count#get t

let rec quantify_type (t: typ): typ = (
   let open_terms = new hashtable in
   let rec search_open_terms closed t = match t with
   | TType(_,_) -> ()
   | TVar(v) -> if not(List.mem v closed) then open_terms#set v v
   | TForall(p,t) -> search_open_terms (p :: closed) t
   | TArrow(l,r) -> List.iter (search_open_terms closed) [l;r]
   | TAny(ts) -> List.iter (search_open_terms closed) ts
   in search_open_terms [] t; let t = ref t in
   List.iter (fun v -> t := TForall(v,!t)) (open_terms#values()); 
   !t
)
let rec instantiate_type (t: typ): typ = (
   match t with
   | TType(t,ts) -> TType(t,ts)
   | TVar(v) -> TVar(v)
   | TForall(p,t) -> type_substitute p (tvar()) t
   | TArrow(l,r) -> TArrow(instantiate_type l,instantiate_type r)
   | TAny(ts) -> TAny(List.map instantiate_type ts)
)

let rec normalize_type (t: typ): typ = match t with
   | TType(_,_) as t -> t
   | TVar(_) as t -> t
   | TForall(p,t) -> TForall(p,normalize_type t)
   | TArrow(l,r) -> TArrow(normalize_type l,normalize_type r)
   | TAny(ts) -> (
     let ts = List.map normalize_type ts in
     let ts = List.flatten (List.map (function TAny(ts) -> ts | TVar _ -> [] | t -> [t]) ts) in
     let ts = List.fold_left (fun result add ->
         if List.mem add result then result
         else match add with TArrow(p,b) -> (
            let merged = ref false in
            let result = List.map (function 
               | TArrow(p',b') as t -> if p=p' then (merged:=true;TArrow(p',TAny[b;b'])) else t
               | t -> t
            ) result in
            if !merged then result else (add :: result)
         ) | _ -> add :: result
     ) [] ts in
     let ts = List.sort (fun a b -> String.compare (pp_type a) (pp_type b)) ts in
     let ts = List.map normalize_type ts in
     if List.length ts=1 then List.nth ts 0 else TAny(ts)
   )
and pp_type (t: typ): string = match normalize_type t with
   | TType(p,ps) -> p^(if List.length ps=0 then "" else "<"^(string_join "," (List.map pp_type ps))^">")
   | TVar(v) -> "'"^v
   | TForall(x,t) -> "forall "^x^". "^(pp_type t)
   | TArrow(a,b) -> "("^(pp_type a)^" -> "^(pp_type b)^")"
   | TAny(ts) -> if List.length ts = 0 then "(|)" else "("^(string_join " | " (List.map pp_type ts))^")"
let rec pp_term (t: term): string = match t with
   | Con (s,tt) -> "(\""^ s ^"\": "^ (pp_type tt) ^"\")"
   | Var (n,s) -> s
   | Abs (n,p,t) -> "\\" ^ p ^ ". " ^ (pp_term t)
   | App (t1,t2) -> "(" ^ (pp_term t1) ^ " " ^ (pp_term t2) ^ ")" 
let rec pp_short_term ?lvl:(lvl=2) (t: term): string = 
   if lvl=0 then "..." else match t with
   | Con (s,tt) -> "(\""^ s ^"\": "^ (pp_type tt) ^"\")"
   | Var (n,s) -> s
   | Abs (n,p,t) -> "\\" ^ p ^ ". " ^ (pp_short_term ~lvl:(lvl-1) t)
   | App (t1,t2) -> "(" ^ (pp_short_term ~lvl:(lvl-1) t1) ^ " " ^ (pp_short_term ~lvl:(lvl-1) t2) ^ ")" 



let (<:) a b = (a=b)
let rec unify_type (lt: typ) (rt: typ): typ = (
   let lt = normalize_type lt in
   let rt = normalize_type rt in
   let fail_unification () = (print_endline("TODO: unify "^(pp_type lt)^" with "^(pp_type rt)); exit 1) in
   match (lt,rt) with
   | (TVar lv),rt -> rt
   | lt,(TVar rv) -> lt
   | (TAny lts),(TAny rts) -> if List.for_all (fun l -> List.mem l rts) lts
     then normalize_type lt else fail_unification()
   | (TAny lts),rt -> if List.mem rt lts then rt else fail_unification()
   | lt,(TAny rts) -> if List.mem lt rts then lt else fail_unification()
   | (TArrow(p1,b1)),(TArrow(p2,b2)) -> TArrow(unify_type p1 p2,unify_type b1 b2)
   | _ -> if lt=rt then lt else fail_unification()
)


let t_typ : (term,typ) hash_table = new hashtable
let ascript t tt = t_typ#set t tt
let descript t = if not(t_typ#has t) then t_typ#set t (tvar()); t_typ#get t

let is_macro_body = function
   | App((Var(_,"@")),_) -> true
   | _ -> false

let pp_namespace_item: namespace_item -> string = function
   | NS_import link -> ""
   | NS_type tt -> pp_type tt
   | NS_bind (bind,t) -> bind^" = "^(pp_term t)
   | NS_expr t -> pp_term t
let pp_namespace: namespace -> string = function 
   | ns -> (string_join "\n" (List.map pp_namespace_item ns))

let uniop op a = app (var op) a
let binop op a b = app (app (var op) a) b
let triop op a b c = app( app( app(var op) a) b) c

let pattern pbs = var "#TODO pattern"
