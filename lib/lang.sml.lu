function $"and"(a: bool)(b: bool): bool = (@ "(" a " andalso " b ")")
function $"or"(a: bool)(b: bool): bool = (@ "(" a " orelse " b ")")
function $"not"(a: bool): bool = (@ "(not " a ")")

function int(a: int): int = a
function int(a: string): int = (@ "(Int.fromString " a ")")
function $"+"(a: int)(b: int): int = (@ "(Int.+ (" a "," b "))")
function $"-"(a: int)(b: int): int = (@ "(Int.- (" a "," b "))")
function $"*"(a: int)(b: int): int = (@ "(Int.* (" a "," b "))")
function $"/"(a: int)(b: int): int = (@ "(Int.div (" a "," b "))")
function $"%"(a: int)(b: int): int = (@ "(Int.mod (" a "," b "))")
function $"=="(a: int)(b: int): bool = (@ "(" a "=" b ")")
function $"!="(a: int)(b: int): bool = not (a == b)
function $"<"(a: int)(b: int): bool = (@ "(Int.< (" a "," b "))")
function $"<="(a: int)(b: int): bool = (@ "(Int.<= (" a "," b "))")
function $">"(a: int)(b: int): bool = (@ "(Int.> (" a "," b "))")
function $">="(a: int)(b: int): bool = (@ "(Int.>= (" a "," b "))")
function abs(a: int): int = (@ "(Int.abs " a ")")
function min(a: int)(b: int): int = (@ "(Int.min(" a "," b "))")
function max(a: int)(b: int): int = (@ "(Int.max(" a "," b "))")

function real(a: real): real = a
function real(a: string): real = (@ "(Real.fromString " a ")")
function $"+"(a: real)(b: real): real = (@ "(Real.+ (" a "," b "))")
function $"-"(a: real)(b: real): real = (@ "(Real.- (" a "," b "))")
function $"*"(a: real)(b: real): real = (@ "(Real.* (" a "," b "))")
function $"/"(a: real)(b: real): real = (@ "(Real./ (" a "," b "))")
function $"%"(a: real)(b: real): real = (@ "(Real.rem (" a "," b "))")
function $"=="(a: real)(b: real): bool = (@ "(" a " = " b ")")
function $"!="(a: real)(b: real): bool = not (a == b)
function $"<"(a: real)(b: real): bool = (@ "(Real.< (" a "," b "))")
function $"<="(a: real)(b: real): bool = (@ "(Real.<= (" a "," b "))")
function $">"(a: real)(b: real): bool = (@ "(Real.> (" a "," b "))")
function $">="(a: real)(b: real): bool = (@ "(Real.>= (" a "," b "))")
function abs(a: real): real = (@ "(Real.abs " a ")")
function min(a: real)(b: real): real = (@ "(Real.min(" a "," b "))")
function max(a: real)(b: real): real = (@ "(Real.max(" a "," b "))")


function string(a: string): string = a
function string(a: bool): string = (@ "(Bool.toString " a ")")
function string(a: int): string = (@ "(Int.toString " a ")")
function string(a: real): string = (@ "(Real.toString " a ")")
function $".length"(a: string): int = (@ "(String.size " a ")")
function $"+"(a: string)(b: string): string = (@ "(" a "^" b ")")
function $"+"(a: string)(b: int): string = a + string(b)
function $"+"(a: string)(b: bool): string = a + string(b)

function $".length"(a: list<'a>): int = (@ "(List.length " a ")")

function assert(a: bool): unit = (@ "(if not(" a ") then (print \"failed assertion\"; OS.Process.exit OS.Process.failure) else ())")
function print(a: string): unit = (@ "(print " a ")")
function print(a: int): unit = (@ "(print " string(a) ")")
function print(a: real): unit = (@ "(print " string(a) ")")

function $"|"(x: 'a)(f: 'a -> 'b): 'b = f(x)
function $";"(l: 'a)(r: 'b): 'b = r

function exit(code:int): 'a = (@ "(Unix.exit (Word8.fromInt " code "))")
function exit(_:unit): 'a = (@ "(Unix.exit (Word8.fromInt 0))")

let argv : list<string> = (@ "(CommandLine.arguments())")
